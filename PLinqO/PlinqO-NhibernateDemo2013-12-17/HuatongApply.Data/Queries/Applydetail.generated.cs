#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HuatongApply.Data
{
    /// <summary>
    /// The query extension class for Applydetail.
    /// </summary>
    public static partial class ApplydetailExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HuatongApply.Data.Applydetail GetByKey(this IQueryable<HuatongApply.Data.Applydetail> queryable
            , System.Int32 detailId
            )
        {
            return queryable
                .Where(a => a.DetailId == detailId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.DetailId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="detailId">DetailId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByDetailId(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Int32 detailId)
        {
            return queryable.Where(a => a.DetailId == detailId);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.DetailId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="detailId">DetailId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByDetailId(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, System.Int32 detailId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.DetailId > detailId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.DetailId >= detailId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.DetailId < detailId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.DetailId <= detailId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.DetailId != detailId);
                default:
                    return queryable.Where(a => a.DetailId == detailId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.DetailId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="detailId">DetailId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByDetailId(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Int32 detailId, params System.Int32[] additionalValues)
        {
            var detailIdList = new List<System.Int32> { detailId };

            if (additionalValues != null)
                detailIdList.AddRange(additionalValues);

            if (detailIdList.Count == 1)
                return queryable.ByDetailId(detailIdList[0]);

            return queryable.ByDetailId(detailIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.DetailId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByDetailId(this IQueryable<HuatongApply.Data.Applydetail> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.DetailId));
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Count"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="count">Count to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCount(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Int32? count)
        {
            // support nulls
            return count == null 
                ? queryable.Where(a => a.Count == null) 
                : queryable.Where(a => a.Count == count);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Count"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="count">Count to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCount(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, System.Int32? count)
        {
            if (count == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("count", "Parameter 'count' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Count > count);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Count >= count);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Count < count);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Count <= count);
                case ComparisonOperator.NotEquals:
                    return count == null 
                        ? queryable.Where(a => a.Count != null) 
                        : queryable.Where(a => a.Count != count);
                default:
                    return count == null 
                        ? queryable.Where(a => a.Count == null) 
                        : queryable.Where(a => a.Count == count);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Count"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="count">Count to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCount(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Int32? count, params System.Int32?[] additionalValues)
        {
            var countList = new List<System.Int32?> { count };

            if (additionalValues != null)
                countList.AddRange(additionalValues);
            else
                countList.Add(null);

            if (countList.Count == 1)
                return queryable.ByCount(countList[0]);

            return queryable.ByCount(countList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Count"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCount(this IQueryable<HuatongApply.Data.Applydetail> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applydetail, bool>("Count", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByPrice(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Double? price)
        {
            // support nulls
            return price == null 
                ? queryable.Where(a => a.Price == null) 
                : queryable.Where(a => a.Price == price);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByPrice(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, System.Double? price)
        {
            if (price == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("price", "Parameter 'price' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Price > price);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Price >= price);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Price < price);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Price <= price);
                case ComparisonOperator.NotEquals:
                    return price == null 
                        ? queryable.Where(a => a.Price != null) 
                        : queryable.Where(a => a.Price != price);
                default:
                    return price == null 
                        ? queryable.Where(a => a.Price == null) 
                        : queryable.Where(a => a.Price == price);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByPrice(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Double? price, params System.Double?[] additionalValues)
        {
            var priceList = new List<System.Double?> { price };

            if (additionalValues != null)
                priceList.AddRange(additionalValues);
            else
                priceList.Add(null);

            if (priceList.Count == 1)
                return queryable.ByPrice(priceList[0]);

            return queryable.ByPrice(priceList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByPrice(this IQueryable<HuatongApply.Data.Applydetail> queryable, IEnumerable<System.Double?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applydetail, bool>("Price", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.DateTime? createdOn)
        {
            // support nulls
            return createdOn == null 
                ? queryable.Where(a => a.CreatedOn == null) 
                : queryable.Where(a => a.CreatedOn == createdOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, System.DateTime? createdOn)
        {
            if (createdOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("createdOn", "Parameter 'createdOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.CreatedOn > createdOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.CreatedOn >= createdOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.CreatedOn < createdOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.CreatedOn <= createdOn);
                case ComparisonOperator.NotEquals:
                    return createdOn == null 
                        ? queryable.Where(a => a.CreatedOn != null) 
                        : queryable.Where(a => a.CreatedOn != createdOn);
                default:
                    return createdOn == null 
                        ? queryable.Where(a => a.CreatedOn == null) 
                        : queryable.Where(a => a.CreatedOn == createdOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.DateTime? createdOn, params System.DateTime?[] additionalValues)
        {
            var createdOnList = new List<System.DateTime?> { createdOn };

            if (additionalValues != null)
                createdOnList.AddRange(additionalValues);
            else
                createdOnList.Add(null);

            if (createdOnList.Count == 1)
                return queryable.ByCreatedOn(createdOnList[0]);

            return queryable.ByCreatedOn(createdOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applydetail, bool>("CreatedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.String createdBy)
        {
            // support nulls
            return createdBy == null 
                ? queryable.Where(a => a.CreatedBy == null) 
                : queryable.Where(a => a.CreatedBy == createdBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, ContainmentOperator containmentOperator, System.String createdBy)
        {
            if (createdBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("createdBy", "Parameter 'createdBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.CreatedBy.Contains(createdBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.CreatedBy.StartsWith(createdBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.CreatedBy.EndsWith(createdBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.CreatedBy.Contains(createdBy) == false);
                case ContainmentOperator.NotEquals:
                    return createdBy == null 
                        ? queryable.Where(a => a.CreatedBy != null) 
                        : queryable.Where(a => a.CreatedBy != createdBy);
                default:
                    return createdBy == null 
                        ? queryable.Where(a => a.CreatedBy == null) 
                        : queryable.Where(a => a.CreatedBy == createdBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.String createdBy, params System.String[] additionalValues)
        {
            var createdByList = new List<System.String> { createdBy };

            if (additionalValues != null)
                createdByList.AddRange(additionalValues);
            else
                createdByList.Add(null);

            if (createdByList.Count == 1)
                return queryable.ByCreatedBy(createdByList[0]);

            return queryable.ByCreatedBy(createdByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByCreatedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applydetail, bool>("CreatedBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.DateTime? modifiedOn)
        {
            // support nulls
            return modifiedOn == null 
                ? queryable.Where(a => a.ModifiedOn == null) 
                : queryable.Where(a => a.ModifiedOn == modifiedOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, System.DateTime? modifiedOn)
        {
            if (modifiedOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("modifiedOn", "Parameter 'modifiedOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ModifiedOn > modifiedOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ModifiedOn >= modifiedOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ModifiedOn < modifiedOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ModifiedOn <= modifiedOn);
                case ComparisonOperator.NotEquals:
                    return modifiedOn == null 
                        ? queryable.Where(a => a.ModifiedOn != null) 
                        : queryable.Where(a => a.ModifiedOn != modifiedOn);
                default:
                    return modifiedOn == null 
                        ? queryable.Where(a => a.ModifiedOn == null) 
                        : queryable.Where(a => a.ModifiedOn == modifiedOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.DateTime? modifiedOn, params System.DateTime?[] additionalValues)
        {
            var modifiedOnList = new List<System.DateTime?> { modifiedOn };

            if (additionalValues != null)
                modifiedOnList.AddRange(additionalValues);
            else
                modifiedOnList.Add(null);

            if (modifiedOnList.Count == 1)
                return queryable.ByModifiedOn(modifiedOnList[0]);

            return queryable.ByModifiedOn(modifiedOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedOn(this IQueryable<HuatongApply.Data.Applydetail> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applydetail, bool>("ModifiedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.String modifiedBy)
        {
            // support nulls
            return modifiedBy == null 
                ? queryable.Where(a => a.ModifiedBy == null) 
                : queryable.Where(a => a.ModifiedBy == modifiedBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, ContainmentOperator containmentOperator, System.String modifiedBy)
        {
            if (modifiedBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("modifiedBy", "Parameter 'modifiedBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ModifiedBy.Contains(modifiedBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ModifiedBy.StartsWith(modifiedBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ModifiedBy.EndsWith(modifiedBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ModifiedBy.Contains(modifiedBy) == false);
                case ContainmentOperator.NotEquals:
                    return modifiedBy == null 
                        ? queryable.Where(a => a.ModifiedBy != null) 
                        : queryable.Where(a => a.ModifiedBy != modifiedBy);
                default:
                    return modifiedBy == null 
                        ? queryable.Where(a => a.ModifiedBy == null) 
                        : queryable.Where(a => a.ModifiedBy == modifiedBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.String modifiedBy, params System.String[] additionalValues)
        {
            var modifiedByList = new List<System.String> { modifiedBy };

            if (additionalValues != null)
                modifiedByList.AddRange(additionalValues);
            else
                modifiedByList.Add(null);

            if (modifiedByList.Count == 1)
                return queryable.ByModifiedBy(modifiedByList[0]);

            return queryable.ByModifiedBy(modifiedByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByModifiedBy(this IQueryable<HuatongApply.Data.Applydetail> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applydetail, bool>("ModifiedBy", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyrecord's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyrecord">Applyrecord to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyrecord(this IQueryable<HuatongApply.Data.Applydetail> queryable, HuatongApply.Data.Applyrecord applyrecord)
        {
            return queryable.ByApplyrecord(ComparisonOperator.Equals, applyrecord);
        }
        
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyrecord's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="applyrecord">Applyrecord to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyrecord(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, HuatongApply.Data.Applyrecord applyrecord)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.Applyrecord == applyrecord);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Applyrecord != applyrecord);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyrecord's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyId">ApplyId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyrecord(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Int32 applyId)
        {
            return queryable.ByApplyrecord(ComparisonOperator.Equals, applyId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyrecord's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="applyId">ApplyId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyrecord(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, System.Int32 applyId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.Applyrecord.ApplyId == applyId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Applyrecord.ApplyId != applyId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyitem's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyitem">Applyitem to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyitem(this IQueryable<HuatongApply.Data.Applydetail> queryable, HuatongApply.Data.Applyitem applyitem)
        {
            return queryable.ByApplyitem(ComparisonOperator.Equals, applyitem);
        }
        
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyitem's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="applyitem">Applyitem to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyitem(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, HuatongApply.Data.Applyitem applyitem)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.Applyitem == applyitem);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Applyitem != applyitem);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyitem's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyitem(this IQueryable<HuatongApply.Data.Applydetail> queryable, System.Int32 itemId)
        {
            return queryable.ByApplyitem(ComparisonOperator.Equals, itemId);
        }
        
        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applydetail by Applyitem's primary key."/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applydetail> ByApplyitem(this IQueryable<HuatongApply.Data.Applydetail> queryable, ComparisonOperator comparisonOperator, System.Int32 itemId)
        {
            switch(comparisonOperator)
            {
                case ComparisonOperator.Equals:
                    return queryable.Where(a => a.Applyitem.ItemId == itemId);
                
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.Applyitem.ItemId != itemId);
                    
                default:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support Association type.", "comparisonOperator");
            }
        }
            
        #endregion
    }
}
#pragma warning restore 1591


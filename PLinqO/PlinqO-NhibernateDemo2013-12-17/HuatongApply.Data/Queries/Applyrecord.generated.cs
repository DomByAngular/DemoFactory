#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HuatongApply.Data
{
    /// <summary>
    /// The query extension class for Applyrecord.
    /// </summary>
    public static partial class ApplyrecordExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HuatongApply.Data.Applyrecord GetByKey(this IQueryable<HuatongApply.Data.Applyrecord> queryable
            , System.Int32 applyId
            )
        {
            return queryable
                .Where(a => a.ApplyId == applyId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyId">ApplyId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32 applyId)
        {
            return queryable.Where(a => a.ApplyId == applyId);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyId">ApplyId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.Int32 applyId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ApplyId > applyId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ApplyId >= applyId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ApplyId < applyId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ApplyId <= applyId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.ApplyId != applyId);
                default:
                    return queryable.Where(a => a.ApplyId == applyId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyId">ApplyId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32 applyId, params System.Int32[] additionalValues)
        {
            var applyIdList = new List<System.Int32> { applyId };

            if (additionalValues != null)
                applyIdList.AddRange(additionalValues);

            if (applyIdList.Count == 1)
                return queryable.ByApplyId(applyIdList[0]);

            return queryable.ByApplyId(applyIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.ApplyId));
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.OrId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orId">OrId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByOrId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32? orId)
        {
            // support nulls
            return orId == null 
                ? queryable.Where(a => a.OrId == null) 
                : queryable.Where(a => a.OrId == orId);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.OrId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orId">OrId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByOrId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.Int32? orId)
        {
            if (orId == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("orId", "Parameter 'orId' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.OrId > orId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.OrId >= orId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.OrId < orId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.OrId <= orId);
                case ComparisonOperator.NotEquals:
                    return orId == null 
                        ? queryable.Where(a => a.OrId != null) 
                        : queryable.Where(a => a.OrId != orId);
                default:
                    return orId == null 
                        ? queryable.Where(a => a.OrId == null) 
                        : queryable.Where(a => a.OrId == orId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.OrId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="orId">OrId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByOrId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32? orId, params System.Int32?[] additionalValues)
        {
            var orIdList = new List<System.Int32?> { orId };

            if (additionalValues != null)
                orIdList.AddRange(additionalValues);
            else
                orIdList.Add(null);

            if (orIdList.Count == 1)
                return queryable.ByOrId(orIdList[0]);

            return queryable.ByOrId(orIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.OrId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByOrId(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("OrId", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByPrice(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Double? price)
        {
            // support nulls
            return price == null 
                ? queryable.Where(a => a.Price == null) 
                : queryable.Where(a => a.Price == price);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByPrice(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.Double? price)
        {
            if (price == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("price", "Parameter 'price' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.Price > price);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.Price >= price);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.Price < price);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.Price <= price);
                case ComparisonOperator.NotEquals:
                    return price == null 
                        ? queryable.Where(a => a.Price != null) 
                        : queryable.Where(a => a.Price != price);
                default:
                    return price == null 
                        ? queryable.Where(a => a.Price == null) 
                        : queryable.Where(a => a.Price == price);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByPrice(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Double? price, params System.Double?[] additionalValues)
        {
            var priceList = new List<System.Double?> { price };

            if (additionalValues != null)
                priceList.AddRange(additionalValues);
            else
                priceList.Add(null);

            if (priceList.Count == 1)
                return queryable.ByPrice(priceList[0]);

            return queryable.ByPrice(priceList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByPrice(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.Double?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("Price", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currency">Currency to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCurrency(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String currency)
        {
            // support nulls
            return currency == null 
                ? queryable.Where(a => a.Currency == null) 
                : queryable.Where(a => a.Currency == currency);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currency">Currency to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCurrency(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String currency)
        {
            if (currency == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("currency", "Parameter 'currency' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Currency.Contains(currency));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Currency.StartsWith(currency));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Currency.EndsWith(currency));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Currency.Contains(currency) == false);
                case ContainmentOperator.NotEquals:
                    return currency == null 
                        ? queryable.Where(a => a.Currency != null) 
                        : queryable.Where(a => a.Currency != currency);
                default:
                    return currency == null 
                        ? queryable.Where(a => a.Currency == null) 
                        : queryable.Where(a => a.Currency == currency);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currency">Currency to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCurrency(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String currency, params System.String[] additionalValues)
        {
            var currencyList = new List<System.String> { currency };

            if (additionalValues != null)
                currencyList.AddRange(additionalValues);
            else
                currencyList.Add(null);

            if (currencyList.Count == 1)
                return queryable.ByCurrency(currencyList[0]);

            return queryable.ByCurrency(currencyList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCurrency(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("Currency", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyBy">ApplyBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String applyBy)
        {
            // support nulls
            return applyBy == null 
                ? queryable.Where(a => a.ApplyBy == null) 
                : queryable.Where(a => a.ApplyBy == applyBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyBy">ApplyBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String applyBy)
        {
            if (applyBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("applyBy", "Parameter 'applyBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ApplyBy.Contains(applyBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ApplyBy.StartsWith(applyBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ApplyBy.EndsWith(applyBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ApplyBy.Contains(applyBy) == false);
                case ContainmentOperator.NotEquals:
                    return applyBy == null 
                        ? queryable.Where(a => a.ApplyBy != null) 
                        : queryable.Where(a => a.ApplyBy != applyBy);
                default:
                    return applyBy == null 
                        ? queryable.Where(a => a.ApplyBy == null) 
                        : queryable.Where(a => a.ApplyBy == applyBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyBy">ApplyBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String applyBy, params System.String[] additionalValues)
        {
            var applyByList = new List<System.String> { applyBy };

            if (additionalValues != null)
                applyByList.AddRange(additionalValues);
            else
                applyByList.Add(null);

            if (applyByList.Count == 1)
                return queryable.ByApplyBy(applyByList[0]);

            return queryable.ByApplyBy(applyByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("ApplyBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyOn">ApplyOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.DateTime? applyOn)
        {
            // support nulls
            return applyOn == null 
                ? queryable.Where(a => a.ApplyOn == null) 
                : queryable.Where(a => a.ApplyOn == applyOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyOn">ApplyOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.DateTime? applyOn)
        {
            if (applyOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("applyOn", "Parameter 'applyOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ApplyOn > applyOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ApplyOn >= applyOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ApplyOn < applyOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ApplyOn <= applyOn);
                case ComparisonOperator.NotEquals:
                    return applyOn == null 
                        ? queryable.Where(a => a.ApplyOn != null) 
                        : queryable.Where(a => a.ApplyOn != applyOn);
                default:
                    return applyOn == null 
                        ? queryable.Where(a => a.ApplyOn == null) 
                        : queryable.Where(a => a.ApplyOn == applyOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="applyOn">ApplyOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.DateTime? applyOn, params System.DateTime?[] additionalValues)
        {
            var applyOnList = new List<System.DateTime?> { applyOn };

            if (additionalValues != null)
                applyOnList.AddRange(additionalValues);
            else
                applyOnList.Add(null);

            if (applyOnList.Count == 1)
                return queryable.ByApplyOn(applyOnList[0]);

            return queryable.ByApplyOn(applyOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ApplyOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByApplyOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("ApplyOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDescription(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String description)
        {
            // support nulls
            return description == null 
                ? queryable.Where(a => a.Description == null) 
                : queryable.Where(a => a.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDescription(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return description == null 
                        ? queryable.Where(a => a.Description != null) 
                        : queryable.Where(a => a.Description != description);
                default:
                    return description == null 
                        ? queryable.Where(a => a.Description == null) 
                        : queryable.Where(a => a.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDescription(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);
            else
                descriptionList.Add(null);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDescription(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("Description", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.IsCar"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isCar">IsCar to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByIsCar(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32? isCar)
        {
            // support nulls
            return isCar == null 
                ? queryable.Where(a => a.IsCar == null) 
                : queryable.Where(a => a.IsCar == isCar);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.IsCar"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isCar">IsCar to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByIsCar(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.Int32? isCar)
        {
            if (isCar == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isCar", "Parameter 'isCar' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.IsCar > isCar);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.IsCar >= isCar);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.IsCar < isCar);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.IsCar <= isCar);
                case ComparisonOperator.NotEquals:
                    return isCar == null 
                        ? queryable.Where(a => a.IsCar != null) 
                        : queryable.Where(a => a.IsCar != isCar);
                default:
                    return isCar == null 
                        ? queryable.Where(a => a.IsCar == null) 
                        : queryable.Where(a => a.IsCar == isCar);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.IsCar"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isCar">IsCar to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByIsCar(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32? isCar, params System.Int32?[] additionalValues)
        {
            var isCarList = new List<System.Int32?> { isCar };

            if (additionalValues != null)
                isCarList.AddRange(additionalValues);
            else
                isCarList.Add(null);

            if (isCarList.Count == 1)
                return queryable.ByIsCar(isCarList[0]);

            return queryable.ByIsCar(isCarList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.IsCar"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByIsCar(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("IsCar", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CarNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="carNo">CarNo to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCarNo(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String carNo)
        {
            // support nulls
            return carNo == null 
                ? queryable.Where(a => a.CarNo == null) 
                : queryable.Where(a => a.CarNo == carNo);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CarNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="carNo">CarNo to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCarNo(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String carNo)
        {
            if (carNo == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("carNo", "Parameter 'carNo' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.CarNo.Contains(carNo));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.CarNo.StartsWith(carNo));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.CarNo.EndsWith(carNo));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.CarNo.Contains(carNo) == false);
                case ContainmentOperator.NotEquals:
                    return carNo == null 
                        ? queryable.Where(a => a.CarNo != null) 
                        : queryable.Where(a => a.CarNo != carNo);
                default:
                    return carNo == null 
                        ? queryable.Where(a => a.CarNo == null) 
                        : queryable.Where(a => a.CarNo == carNo);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CarNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="carNo">CarNo to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCarNo(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String carNo, params System.String[] additionalValues)
        {
            var carNoList = new List<System.String> { carNo };

            if (additionalValues != null)
                carNoList.AddRange(additionalValues);
            else
                carNoList.Add(null);

            if (carNoList.Count == 1)
                return queryable.ByCarNo(carNoList[0]);

            return queryable.ByCarNo(carNoList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CarNo"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCarNo(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("CarNo", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.AuditStatus"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auditStatus">AuditStatus to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByAuditStatus(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32? auditStatus)
        {
            // support nulls
            return auditStatus == null 
                ? queryable.Where(a => a.AuditStatus == null) 
                : queryable.Where(a => a.AuditStatus == auditStatus);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.AuditStatus"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auditStatus">AuditStatus to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByAuditStatus(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.Int32? auditStatus)
        {
            if (auditStatus == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("auditStatus", "Parameter 'auditStatus' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.AuditStatus > auditStatus);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.AuditStatus >= auditStatus);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.AuditStatus < auditStatus);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.AuditStatus <= auditStatus);
                case ComparisonOperator.NotEquals:
                    return auditStatus == null 
                        ? queryable.Where(a => a.AuditStatus != null) 
                        : queryable.Where(a => a.AuditStatus != auditStatus);
                default:
                    return auditStatus == null 
                        ? queryable.Where(a => a.AuditStatus == null) 
                        : queryable.Where(a => a.AuditStatus == auditStatus);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.AuditStatus"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auditStatus">AuditStatus to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByAuditStatus(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.Int32? auditStatus, params System.Int32?[] additionalValues)
        {
            var auditStatusList = new List<System.Int32?> { auditStatus };

            if (additionalValues != null)
                auditStatusList.AddRange(additionalValues);
            else
                auditStatusList.Add(null);

            if (auditStatusList.Count == 1)
                return queryable.ByAuditStatus(auditStatusList[0]);

            return queryable.ByAuditStatus(auditStatusList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.AuditStatus"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByAuditStatus(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("AuditStatus", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.DepAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="depAuditBy">DepAuditBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDepAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String depAuditBy)
        {
            // support nulls
            return depAuditBy == null 
                ? queryable.Where(a => a.DepAuditBy == null) 
                : queryable.Where(a => a.DepAuditBy == depAuditBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.DepAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="depAuditBy">DepAuditBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDepAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String depAuditBy)
        {
            if (depAuditBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("depAuditBy", "Parameter 'depAuditBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.DepAuditBy.Contains(depAuditBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.DepAuditBy.StartsWith(depAuditBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.DepAuditBy.EndsWith(depAuditBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.DepAuditBy.Contains(depAuditBy) == false);
                case ContainmentOperator.NotEquals:
                    return depAuditBy == null 
                        ? queryable.Where(a => a.DepAuditBy != null) 
                        : queryable.Where(a => a.DepAuditBy != depAuditBy);
                default:
                    return depAuditBy == null 
                        ? queryable.Where(a => a.DepAuditBy == null) 
                        : queryable.Where(a => a.DepAuditBy == depAuditBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.DepAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="depAuditBy">DepAuditBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDepAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String depAuditBy, params System.String[] additionalValues)
        {
            var depAuditByList = new List<System.String> { depAuditBy };

            if (additionalValues != null)
                depAuditByList.AddRange(additionalValues);
            else
                depAuditByList.Add(null);

            if (depAuditByList.Count == 1)
                return queryable.ByDepAuditBy(depAuditByList[0]);

            return queryable.ByDepAuditBy(depAuditByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.DepAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByDepAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("DepAuditBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinanceAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="financeAuditBy">FinanceAuditBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinanceAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String financeAuditBy)
        {
            // support nulls
            return financeAuditBy == null 
                ? queryable.Where(a => a.FinanceAuditBy == null) 
                : queryable.Where(a => a.FinanceAuditBy == financeAuditBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinanceAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="financeAuditBy">FinanceAuditBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinanceAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String financeAuditBy)
        {
            if (financeAuditBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("financeAuditBy", "Parameter 'financeAuditBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FinanceAuditBy.Contains(financeAuditBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FinanceAuditBy.StartsWith(financeAuditBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FinanceAuditBy.EndsWith(financeAuditBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FinanceAuditBy.Contains(financeAuditBy) == false);
                case ContainmentOperator.NotEquals:
                    return financeAuditBy == null 
                        ? queryable.Where(a => a.FinanceAuditBy != null) 
                        : queryable.Where(a => a.FinanceAuditBy != financeAuditBy);
                default:
                    return financeAuditBy == null 
                        ? queryable.Where(a => a.FinanceAuditBy == null) 
                        : queryable.Where(a => a.FinanceAuditBy == financeAuditBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinanceAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="financeAuditBy">FinanceAuditBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinanceAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String financeAuditBy, params System.String[] additionalValues)
        {
            var financeAuditByList = new List<System.String> { financeAuditBy };

            if (additionalValues != null)
                financeAuditByList.AddRange(additionalValues);
            else
                financeAuditByList.Add(null);

            if (financeAuditByList.Count == 1)
                return queryable.ByFinanceAuditBy(financeAuditByList[0]);

            return queryable.ByFinanceAuditBy(financeAuditByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinanceAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinanceAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("FinanceAuditBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinalAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="finalAuditBy">FinalAuditBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinalAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String finalAuditBy)
        {
            // support nulls
            return finalAuditBy == null 
                ? queryable.Where(a => a.FinalAuditBy == null) 
                : queryable.Where(a => a.FinalAuditBy == finalAuditBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinalAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="finalAuditBy">FinalAuditBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinalAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String finalAuditBy)
        {
            if (finalAuditBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("finalAuditBy", "Parameter 'finalAuditBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.FinalAuditBy.Contains(finalAuditBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.FinalAuditBy.StartsWith(finalAuditBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.FinalAuditBy.EndsWith(finalAuditBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.FinalAuditBy.Contains(finalAuditBy) == false);
                case ContainmentOperator.NotEquals:
                    return finalAuditBy == null 
                        ? queryable.Where(a => a.FinalAuditBy != null) 
                        : queryable.Where(a => a.FinalAuditBy != finalAuditBy);
                default:
                    return finalAuditBy == null 
                        ? queryable.Where(a => a.FinalAuditBy == null) 
                        : queryable.Where(a => a.FinalAuditBy == finalAuditBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinalAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="finalAuditBy">FinalAuditBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinalAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String finalAuditBy, params System.String[] additionalValues)
        {
            var finalAuditByList = new List<System.String> { finalAuditBy };

            if (additionalValues != null)
                finalAuditByList.AddRange(additionalValues);
            else
                finalAuditByList.Add(null);

            if (finalAuditByList.Count == 1)
                return queryable.ByFinalAuditBy(finalAuditByList[0]);

            return queryable.ByFinalAuditBy(finalAuditByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.FinalAuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByFinalAuditBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("FinalAuditBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.DateTime? createdOn)
        {
            // support nulls
            return createdOn == null 
                ? queryable.Where(a => a.CreatedOn == null) 
                : queryable.Where(a => a.CreatedOn == createdOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.DateTime? createdOn)
        {
            if (createdOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("createdOn", "Parameter 'createdOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.CreatedOn > createdOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.CreatedOn >= createdOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.CreatedOn < createdOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.CreatedOn <= createdOn);
                case ComparisonOperator.NotEquals:
                    return createdOn == null 
                        ? queryable.Where(a => a.CreatedOn != null) 
                        : queryable.Where(a => a.CreatedOn != createdOn);
                default:
                    return createdOn == null 
                        ? queryable.Where(a => a.CreatedOn == null) 
                        : queryable.Where(a => a.CreatedOn == createdOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.DateTime? createdOn, params System.DateTime?[] additionalValues)
        {
            var createdOnList = new List<System.DateTime?> { createdOn };

            if (additionalValues != null)
                createdOnList.AddRange(additionalValues);
            else
                createdOnList.Add(null);

            if (createdOnList.Count == 1)
                return queryable.ByCreatedOn(createdOnList[0]);

            return queryable.ByCreatedOn(createdOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("CreatedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String createdBy)
        {
            // support nulls
            return createdBy == null 
                ? queryable.Where(a => a.CreatedBy == null) 
                : queryable.Where(a => a.CreatedBy == createdBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String createdBy)
        {
            if (createdBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("createdBy", "Parameter 'createdBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.CreatedBy.Contains(createdBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.CreatedBy.StartsWith(createdBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.CreatedBy.EndsWith(createdBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.CreatedBy.Contains(createdBy) == false);
                case ContainmentOperator.NotEquals:
                    return createdBy == null 
                        ? queryable.Where(a => a.CreatedBy != null) 
                        : queryable.Where(a => a.CreatedBy != createdBy);
                default:
                    return createdBy == null 
                        ? queryable.Where(a => a.CreatedBy == null) 
                        : queryable.Where(a => a.CreatedBy == createdBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String createdBy, params System.String[] additionalValues)
        {
            var createdByList = new List<System.String> { createdBy };

            if (additionalValues != null)
                createdByList.AddRange(additionalValues);
            else
                createdByList.Add(null);

            if (createdByList.Count == 1)
                return queryable.ByCreatedBy(createdByList[0]);

            return queryable.ByCreatedBy(createdByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("CreatedBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.DateTime? modifiedOn)
        {
            // support nulls
            return modifiedOn == null 
                ? queryable.Where(a => a.ModifiedOn == null) 
                : queryable.Where(a => a.ModifiedOn == modifiedOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ComparisonOperator comparisonOperator, System.DateTime? modifiedOn)
        {
            if (modifiedOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("modifiedOn", "Parameter 'modifiedOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ModifiedOn > modifiedOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ModifiedOn >= modifiedOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ModifiedOn < modifiedOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ModifiedOn <= modifiedOn);
                case ComparisonOperator.NotEquals:
                    return modifiedOn == null 
                        ? queryable.Where(a => a.ModifiedOn != null) 
                        : queryable.Where(a => a.ModifiedOn != modifiedOn);
                default:
                    return modifiedOn == null 
                        ? queryable.Where(a => a.ModifiedOn == null) 
                        : queryable.Where(a => a.ModifiedOn == modifiedOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.DateTime? modifiedOn, params System.DateTime?[] additionalValues)
        {
            var modifiedOnList = new List<System.DateTime?> { modifiedOn };

            if (additionalValues != null)
                modifiedOnList.AddRange(additionalValues);
            else
                modifiedOnList.Add(null);

            if (modifiedOnList.Count == 1)
                return queryable.ByModifiedOn(modifiedOnList[0]);

            return queryable.ByModifiedOn(modifiedOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("ModifiedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String modifiedBy)
        {
            // support nulls
            return modifiedBy == null 
                ? queryable.Where(a => a.ModifiedBy == null) 
                : queryable.Where(a => a.ModifiedBy == modifiedBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, ContainmentOperator containmentOperator, System.String modifiedBy)
        {
            if (modifiedBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("modifiedBy", "Parameter 'modifiedBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ModifiedBy.Contains(modifiedBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ModifiedBy.StartsWith(modifiedBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ModifiedBy.EndsWith(modifiedBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ModifiedBy.Contains(modifiedBy) == false);
                case ContainmentOperator.NotEquals:
                    return modifiedBy == null 
                        ? queryable.Where(a => a.ModifiedBy != null) 
                        : queryable.Where(a => a.ModifiedBy != modifiedBy);
                default:
                    return modifiedBy == null 
                        ? queryable.Where(a => a.ModifiedBy == null) 
                        : queryable.Where(a => a.ModifiedBy == modifiedBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, System.String modifiedBy, params System.String[] additionalValues)
        {
            var modifiedByList = new List<System.String> { modifiedBy };

            if (additionalValues != null)
                modifiedByList.AddRange(additionalValues);
            else
                modifiedByList.Add(null);

            if (modifiedByList.Count == 1)
                return queryable.ByModifiedBy(modifiedByList[0]);

            return queryable.ByModifiedBy(modifiedByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyrecord.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyrecord> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyrecord> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyrecord, bool>("ModifiedBy", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591


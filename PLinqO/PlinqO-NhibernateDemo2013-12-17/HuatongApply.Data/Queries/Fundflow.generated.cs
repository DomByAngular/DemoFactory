#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HuatongApply.Data
{
    /// <summary>
    /// The query extension class for Fundflow.
    /// </summary>
    public static partial class FundflowExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HuatongApply.Data.Fundflow GetByKey(this IQueryable<HuatongApply.Data.Fundflow> queryable
            , System.Int32 flowId
            )
        {
            return queryable
                .Where(f => f.FlowId == flowId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.FlowId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flowId">FlowId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByFlowId(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32 flowId)
        {
            return queryable.Where(f => f.FlowId == flowId);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.FlowId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flowId">FlowId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByFlowId(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.Int32 flowId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.FlowId > flowId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.FlowId >= flowId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.FlowId < flowId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.FlowId <= flowId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(f => f.FlowId != flowId);
                default:
                    return queryable.Where(f => f.FlowId == flowId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.FlowId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="flowId">FlowId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByFlowId(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32 flowId, params System.Int32[] additionalValues)
        {
            var flowIdList = new List<System.Int32> { flowId };

            if (additionalValues != null)
                flowIdList.AddRange(additionalValues);

            if (flowIdList.Count == 1)
                return queryable.ByFlowId(flowIdList[0]);

            return queryable.ByFlowId(flowIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.FlowId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByFlowId(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(f => values.Contains(f.FlowId));
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="date">Date to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDate(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.DateTime? date)
        {
            // support nulls
            return date == null 
                ? queryable.Where(f => f.Date == null) 
                : queryable.Where(f => f.Date == date);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="date">Date to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDate(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.DateTime? date)
        {
            if (date == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("date", "Parameter 'date' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Date > date);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Date >= date);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Date < date);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Date <= date);
                case ComparisonOperator.NotEquals:
                    return date == null 
                        ? queryable.Where(f => f.Date != null) 
                        : queryable.Where(f => f.Date != date);
                default:
                    return date == null 
                        ? queryable.Where(f => f.Date == null) 
                        : queryable.Where(f => f.Date == date);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="date">Date to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDate(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.DateTime? date, params System.DateTime?[] additionalValues)
        {
            var dateList = new List<System.DateTime?> { date };

            if (additionalValues != null)
                dateList.AddRange(additionalValues);
            else
                dateList.Add(null);

            if (dateList.Count == 1)
                return queryable.ByDate(dateList[0]);

            return queryable.ByDate(dateList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Date"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDate(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("Date", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.PaymentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentType">PaymentType to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPaymentType(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32? paymentType)
        {
            // support nulls
            return paymentType == null 
                ? queryable.Where(f => f.PaymentType == null) 
                : queryable.Where(f => f.PaymentType == paymentType);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.PaymentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentType">PaymentType to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPaymentType(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.Int32? paymentType)
        {
            if (paymentType == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("paymentType", "Parameter 'paymentType' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.PaymentType > paymentType);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.PaymentType >= paymentType);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.PaymentType < paymentType);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.PaymentType <= paymentType);
                case ComparisonOperator.NotEquals:
                    return paymentType == null 
                        ? queryable.Where(f => f.PaymentType != null) 
                        : queryable.Where(f => f.PaymentType != paymentType);
                default:
                    return paymentType == null 
                        ? queryable.Where(f => f.PaymentType == null) 
                        : queryable.Where(f => f.PaymentType == paymentType);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.PaymentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="paymentType">PaymentType to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPaymentType(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32? paymentType, params System.Int32?[] additionalValues)
        {
            var paymentTypeList = new List<System.Int32?> { paymentType };

            if (additionalValues != null)
                paymentTypeList.AddRange(additionalValues);
            else
                paymentTypeList.Add(null);

            if (paymentTypeList.Count == 1)
                return queryable.ByPaymentType(paymentTypeList[0]);

            return queryable.ByPaymentType(paymentTypeList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.PaymentType"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPaymentType(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("PaymentType", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Bank"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="bank">Bank to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByBank(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String bank)
        {
            // support nulls
            return bank == null 
                ? queryable.Where(f => f.Bank == null) 
                : queryable.Where(f => f.Bank == bank);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Bank"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="bank">Bank to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByBank(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String bank)
        {
            if (bank == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("bank", "Parameter 'bank' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Bank.Contains(bank));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Bank.StartsWith(bank));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Bank.EndsWith(bank));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Bank.Contains(bank) == false);
                case ContainmentOperator.NotEquals:
                    return bank == null 
                        ? queryable.Where(f => f.Bank != null) 
                        : queryable.Where(f => f.Bank != bank);
                default:
                    return bank == null 
                        ? queryable.Where(f => f.Bank == null) 
                        : queryable.Where(f => f.Bank == bank);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Bank"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="bank">Bank to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByBank(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String bank, params System.String[] additionalValues)
        {
            var bankList = new List<System.String> { bank };

            if (additionalValues != null)
                bankList.AddRange(additionalValues);
            else
                bankList.Add(null);

            if (bankList.Count == 1)
                return queryable.ByBank(bankList[0]);

            return queryable.ByBank(bankList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Bank"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByBank(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("Bank", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="account">Account to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAccount(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String account)
        {
            // support nulls
            return account == null 
                ? queryable.Where(f => f.Account == null) 
                : queryable.Where(f => f.Account == account);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="account">Account to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAccount(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String account)
        {
            if (account == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("account", "Parameter 'account' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Account.Contains(account));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Account.StartsWith(account));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Account.EndsWith(account));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Account.Contains(account) == false);
                case ContainmentOperator.NotEquals:
                    return account == null 
                        ? queryable.Where(f => f.Account != null) 
                        : queryable.Where(f => f.Account != account);
                default:
                    return account == null 
                        ? queryable.Where(f => f.Account == null) 
                        : queryable.Where(f => f.Account == account);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="account">Account to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAccount(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String account, params System.String[] additionalValues)
        {
            var accountList = new List<System.String> { account };

            if (additionalValues != null)
                accountList.AddRange(additionalValues);
            else
                accountList.Add(null);

            if (accountList.Count == 1)
                return queryable.ByAccount(accountList[0]);

            return queryable.ByAccount(accountList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAccount(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("Account", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPrice(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Double? price)
        {
            // support nulls
            return price == null 
                ? queryable.Where(f => f.Price == null) 
                : queryable.Where(f => f.Price == price);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPrice(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.Double? price)
        {
            if (price == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("price", "Parameter 'price' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.Price > price);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.Price >= price);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.Price < price);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.Price <= price);
                case ComparisonOperator.NotEquals:
                    return price == null 
                        ? queryable.Where(f => f.Price != null) 
                        : queryable.Where(f => f.Price != price);
                default:
                    return price == null 
                        ? queryable.Where(f => f.Price == null) 
                        : queryable.Where(f => f.Price == price);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="price">Price to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPrice(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Double? price, params System.Double?[] additionalValues)
        {
            var priceList = new List<System.Double?> { price };

            if (additionalValues != null)
                priceList.AddRange(additionalValues);
            else
                priceList.Add(null);

            if (priceList.Count == 1)
                return queryable.ByPrice(priceList[0]);

            return queryable.ByPrice(priceList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Price"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByPrice(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.Double?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("Price", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currency">Currency to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCurrency(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String currency)
        {
            // support nulls
            return currency == null 
                ? queryable.Where(f => f.Currency == null) 
                : queryable.Where(f => f.Currency == currency);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currency">Currency to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCurrency(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String currency)
        {
            if (currency == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("currency", "Parameter 'currency' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Currency.Contains(currency));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Currency.StartsWith(currency));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Currency.EndsWith(currency));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Currency.Contains(currency) == false);
                case ContainmentOperator.NotEquals:
                    return currency == null 
                        ? queryable.Where(f => f.Currency != null) 
                        : queryable.Where(f => f.Currency != currency);
                default:
                    return currency == null 
                        ? queryable.Where(f => f.Currency == null) 
                        : queryable.Where(f => f.Currency == currency);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="currency">Currency to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCurrency(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String currency, params System.String[] additionalValues)
        {
            var currencyList = new List<System.String> { currency };

            if (additionalValues != null)
                currencyList.AddRange(additionalValues);
            else
                currencyList.Add(null);

            if (currencyList.Count == 1)
                return queryable.ByCurrency(currencyList[0]);

            return queryable.ByCurrency(currencyList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Currency"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCurrency(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("Currency", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDescription(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String description)
        {
            // support nulls
            return description == null 
                ? queryable.Where(f => f.Description == null) 
                : queryable.Where(f => f.Description == description);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDescription(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String description)
        {
            if (description == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("description", "Parameter 'description' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Description.Contains(description));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Description.StartsWith(description));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Description.EndsWith(description));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Description.Contains(description) == false);
                case ContainmentOperator.NotEquals:
                    return description == null 
                        ? queryable.Where(f => f.Description != null) 
                        : queryable.Where(f => f.Description != description);
                default:
                    return description == null 
                        ? queryable.Where(f => f.Description == null) 
                        : queryable.Where(f => f.Description == description);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="description">Description to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDescription(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String description, params System.String[] additionalValues)
        {
            var descriptionList = new List<System.String> { description };

            if (additionalValues != null)
                descriptionList.AddRange(additionalValues);
            else
                descriptionList.Add(null);

            if (descriptionList.Count == 1)
                return queryable.ByDescription(descriptionList[0]);

            return queryable.ByDescription(descriptionList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Description"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByDescription(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("Description", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Maker"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maker">Maker to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByMaker(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String maker)
        {
            // support nulls
            return maker == null 
                ? queryable.Where(f => f.Maker == null) 
                : queryable.Where(f => f.Maker == maker);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Maker"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maker">Maker to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByMaker(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String maker)
        {
            if (maker == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("maker", "Parameter 'maker' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.Maker.Contains(maker));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.Maker.StartsWith(maker));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.Maker.EndsWith(maker));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.Maker.Contains(maker) == false);
                case ContainmentOperator.NotEquals:
                    return maker == null 
                        ? queryable.Where(f => f.Maker != null) 
                        : queryable.Where(f => f.Maker != maker);
                default:
                    return maker == null 
                        ? queryable.Where(f => f.Maker == null) 
                        : queryable.Where(f => f.Maker == maker);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Maker"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="maker">Maker to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByMaker(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String maker, params System.String[] additionalValues)
        {
            var makerList = new List<System.String> { maker };

            if (additionalValues != null)
                makerList.AddRange(additionalValues);
            else
                makerList.Add(null);

            if (makerList.Count == 1)
                return queryable.ByMaker(makerList[0]);

            return queryable.ByMaker(makerList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.Maker"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByMaker(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("Maker", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsPayment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPayment">IsPayment to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsPayment(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32? isPayment)
        {
            // support nulls
            return isPayment == null 
                ? queryable.Where(f => f.IsPayment == null) 
                : queryable.Where(f => f.IsPayment == isPayment);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsPayment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPayment">IsPayment to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsPayment(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.Int32? isPayment)
        {
            if (isPayment == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isPayment", "Parameter 'isPayment' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.IsPayment > isPayment);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.IsPayment >= isPayment);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.IsPayment < isPayment);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.IsPayment <= isPayment);
                case ComparisonOperator.NotEquals:
                    return isPayment == null 
                        ? queryable.Where(f => f.IsPayment != null) 
                        : queryable.Where(f => f.IsPayment != isPayment);
                default:
                    return isPayment == null 
                        ? queryable.Where(f => f.IsPayment == null) 
                        : queryable.Where(f => f.IsPayment == isPayment);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsPayment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isPayment">IsPayment to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsPayment(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32? isPayment, params System.Int32?[] additionalValues)
        {
            var isPaymentList = new List<System.Int32?> { isPayment };

            if (additionalValues != null)
                isPaymentList.AddRange(additionalValues);
            else
                isPaymentList.Add(null);

            if (isPaymentList.Count == 1)
                return queryable.ByIsPayment(isPaymentList[0]);

            return queryable.ByIsPayment(isPaymentList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsPayment"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsPayment(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("IsPayment", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsAudit"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isAudit">IsAudit to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsAudit(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32? isAudit)
        {
            // support nulls
            return isAudit == null 
                ? queryable.Where(f => f.IsAudit == null) 
                : queryable.Where(f => f.IsAudit == isAudit);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsAudit"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isAudit">IsAudit to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsAudit(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.Int32? isAudit)
        {
            if (isAudit == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("isAudit", "Parameter 'isAudit' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.IsAudit > isAudit);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.IsAudit >= isAudit);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.IsAudit < isAudit);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.IsAudit <= isAudit);
                case ComparisonOperator.NotEquals:
                    return isAudit == null 
                        ? queryable.Where(f => f.IsAudit != null) 
                        : queryable.Where(f => f.IsAudit != isAudit);
                default:
                    return isAudit == null 
                        ? queryable.Where(f => f.IsAudit == null) 
                        : queryable.Where(f => f.IsAudit == isAudit);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsAudit"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="isAudit">IsAudit to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsAudit(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.Int32? isAudit, params System.Int32?[] additionalValues)
        {
            var isAuditList = new List<System.Int32?> { isAudit };

            if (additionalValues != null)
                isAuditList.AddRange(additionalValues);
            else
                isAuditList.Add(null);

            if (isAuditList.Count == 1)
                return queryable.ByIsAudit(isAuditList[0]);

            return queryable.ByIsAudit(isAuditList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.IsAudit"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByIsAudit(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("IsAudit", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.AuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auditBy">AuditBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAuditBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String auditBy)
        {
            // support nulls
            return auditBy == null 
                ? queryable.Where(f => f.AuditBy == null) 
                : queryable.Where(f => f.AuditBy == auditBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.AuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auditBy">AuditBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAuditBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String auditBy)
        {
            if (auditBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("auditBy", "Parameter 'auditBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.AuditBy.Contains(auditBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.AuditBy.StartsWith(auditBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.AuditBy.EndsWith(auditBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.AuditBy.Contains(auditBy) == false);
                case ContainmentOperator.NotEquals:
                    return auditBy == null 
                        ? queryable.Where(f => f.AuditBy != null) 
                        : queryable.Where(f => f.AuditBy != auditBy);
                default:
                    return auditBy == null 
                        ? queryable.Where(f => f.AuditBy == null) 
                        : queryable.Where(f => f.AuditBy == auditBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.AuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="auditBy">AuditBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAuditBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String auditBy, params System.String[] additionalValues)
        {
            var auditByList = new List<System.String> { auditBy };

            if (additionalValues != null)
                auditByList.AddRange(additionalValues);
            else
                auditByList.Add(null);

            if (auditByList.Count == 1)
                return queryable.ByAuditBy(auditByList[0]);

            return queryable.ByAuditBy(auditByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.AuditBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByAuditBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("AuditBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.DateTime? createdOn)
        {
            // support nulls
            return createdOn == null 
                ? queryable.Where(f => f.CreatedOn == null) 
                : queryable.Where(f => f.CreatedOn == createdOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.DateTime? createdOn)
        {
            if (createdOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("createdOn", "Parameter 'createdOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.CreatedOn > createdOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.CreatedOn >= createdOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.CreatedOn < createdOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.CreatedOn <= createdOn);
                case ComparisonOperator.NotEquals:
                    return createdOn == null 
                        ? queryable.Where(f => f.CreatedOn != null) 
                        : queryable.Where(f => f.CreatedOn != createdOn);
                default:
                    return createdOn == null 
                        ? queryable.Where(f => f.CreatedOn == null) 
                        : queryable.Where(f => f.CreatedOn == createdOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.DateTime? createdOn, params System.DateTime?[] additionalValues)
        {
            var createdOnList = new List<System.DateTime?> { createdOn };

            if (additionalValues != null)
                createdOnList.AddRange(additionalValues);
            else
                createdOnList.Add(null);

            if (createdOnList.Count == 1)
                return queryable.ByCreatedOn(createdOnList[0]);

            return queryable.ByCreatedOn(createdOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("CreatedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String createdBy)
        {
            // support nulls
            return createdBy == null 
                ? queryable.Where(f => f.CreatedBy == null) 
                : queryable.Where(f => f.CreatedBy == createdBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String createdBy)
        {
            if (createdBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("createdBy", "Parameter 'createdBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.CreatedBy.Contains(createdBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.CreatedBy.StartsWith(createdBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.CreatedBy.EndsWith(createdBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.CreatedBy.Contains(createdBy) == false);
                case ContainmentOperator.NotEquals:
                    return createdBy == null 
                        ? queryable.Where(f => f.CreatedBy != null) 
                        : queryable.Where(f => f.CreatedBy != createdBy);
                default:
                    return createdBy == null 
                        ? queryable.Where(f => f.CreatedBy == null) 
                        : queryable.Where(f => f.CreatedBy == createdBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String createdBy, params System.String[] additionalValues)
        {
            var createdByList = new List<System.String> { createdBy };

            if (additionalValues != null)
                createdByList.AddRange(additionalValues);
            else
                createdByList.Add(null);

            if (createdByList.Count == 1)
                return queryable.ByCreatedBy(createdByList[0]);

            return queryable.ByCreatedBy(createdByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByCreatedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("CreatedBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.DateTime? modifiedOn)
        {
            // support nulls
            return modifiedOn == null 
                ? queryable.Where(f => f.ModifiedOn == null) 
                : queryable.Where(f => f.ModifiedOn == modifiedOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, ComparisonOperator comparisonOperator, System.DateTime? modifiedOn)
        {
            if (modifiedOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("modifiedOn", "Parameter 'modifiedOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(f => f.ModifiedOn > modifiedOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(f => f.ModifiedOn >= modifiedOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(f => f.ModifiedOn < modifiedOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(f => f.ModifiedOn <= modifiedOn);
                case ComparisonOperator.NotEquals:
                    return modifiedOn == null 
                        ? queryable.Where(f => f.ModifiedOn != null) 
                        : queryable.Where(f => f.ModifiedOn != modifiedOn);
                default:
                    return modifiedOn == null 
                        ? queryable.Where(f => f.ModifiedOn == null) 
                        : queryable.Where(f => f.ModifiedOn == modifiedOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.DateTime? modifiedOn, params System.DateTime?[] additionalValues)
        {
            var modifiedOnList = new List<System.DateTime?> { modifiedOn };

            if (additionalValues != null)
                modifiedOnList.AddRange(additionalValues);
            else
                modifiedOnList.Add(null);

            if (modifiedOnList.Count == 1)
                return queryable.ByModifiedOn(modifiedOnList[0]);

            return queryable.ByModifiedOn(modifiedOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedOn(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("ModifiedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String modifiedBy)
        {
            // support nulls
            return modifiedBy == null 
                ? queryable.Where(f => f.ModifiedBy == null) 
                : queryable.Where(f => f.ModifiedBy == modifiedBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, ContainmentOperator containmentOperator, System.String modifiedBy)
        {
            if (modifiedBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("modifiedBy", "Parameter 'modifiedBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(f => f.ModifiedBy.Contains(modifiedBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(f => f.ModifiedBy.StartsWith(modifiedBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(f => f.ModifiedBy.EndsWith(modifiedBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(f => f.ModifiedBy.Contains(modifiedBy) == false);
                case ContainmentOperator.NotEquals:
                    return modifiedBy == null 
                        ? queryable.Where(f => f.ModifiedBy != null) 
                        : queryable.Where(f => f.ModifiedBy != modifiedBy);
                default:
                    return modifiedBy == null 
                        ? queryable.Where(f => f.ModifiedBy == null) 
                        : queryable.Where(f => f.ModifiedBy == modifiedBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, System.String modifiedBy, params System.String[] additionalValues)
        {
            var modifiedByList = new List<System.String> { modifiedBy };

            if (additionalValues != null)
                modifiedByList.AddRange(additionalValues);
            else
                modifiedByList.Add(null);

            if (modifiedByList.Count == 1)
                return queryable.ByModifiedBy(modifiedByList[0]);

            return queryable.ByModifiedBy(modifiedByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Fundflow.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Fundflow> ByModifiedBy(this IQueryable<HuatongApply.Data.Fundflow> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Fundflow, bool>("ModifiedBy", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591


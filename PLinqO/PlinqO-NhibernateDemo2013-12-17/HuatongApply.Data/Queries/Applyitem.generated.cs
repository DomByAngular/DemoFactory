#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace HuatongApply.Data
{
    /// <summary>
    /// The query extension class for Applyitem.
    /// </summary>
    public static partial class ApplyitemExtensions
    {
        #region Unique Results
        
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static HuatongApply.Data.Applyitem GetByKey(this IQueryable<HuatongApply.Data.Applyitem> queryable
            , System.Int32 itemId
            )
        {
            return queryable
                .Where(a => a.ItemId == itemId)
                .FirstOrDefault();
        }
        
        #endregion
        
        #region By Property
        

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemId(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.Int32 itemId)
        {
            return queryable.Where(a => a.ItemId == itemId);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemId(this IQueryable<HuatongApply.Data.Applyitem> queryable, ComparisonOperator comparisonOperator, System.Int32 itemId)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ItemId > itemId);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ItemId >= itemId);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ItemId < itemId);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ItemId <= itemId);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(a => a.ItemId != itemId);
                default:
                    return queryable.Where(a => a.ItemId == itemId);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemId">ItemId to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemId(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.Int32 itemId, params System.Int32[] additionalValues)
        {
            var itemIdList = new List<System.Int32> { itemId };

            if (additionalValues != null)
                itemIdList.AddRange(additionalValues);

            if (itemIdList.Count == 1)
                return queryable.ByItemId(itemIdList[0]);

            return queryable.ByItemId(itemIdList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemId"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemId(this IQueryable<HuatongApply.Data.Applyitem> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(a => values.Contains(a.ItemId));
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemName(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.String itemName)
        {
            // support nulls
            return itemName == null 
                ? queryable.Where(a => a.ItemName == null) 
                : queryable.Where(a => a.ItemName == itemName);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemName(this IQueryable<HuatongApply.Data.Applyitem> queryable, ContainmentOperator containmentOperator, System.String itemName)
        {
            if (itemName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("itemName", "Parameter 'itemName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ItemName.Contains(itemName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ItemName.StartsWith(itemName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ItemName.EndsWith(itemName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ItemName.Contains(itemName) == false);
                case ContainmentOperator.NotEquals:
                    return itemName == null 
                        ? queryable.Where(a => a.ItemName != null) 
                        : queryable.Where(a => a.ItemName != itemName);
                default:
                    return itemName == null 
                        ? queryable.Where(a => a.ItemName == null) 
                        : queryable.Where(a => a.ItemName == itemName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="itemName">ItemName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemName(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.String itemName, params System.String[] additionalValues)
        {
            var itemNameList = new List<System.String> { itemName };

            if (additionalValues != null)
                itemNameList.AddRange(additionalValues);
            else
                itemNameList.Add(null);

            if (itemNameList.Count == 1)
                return queryable.ByItemName(itemNameList[0]);

            return queryable.ByItemName(itemNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ItemName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByItemName(this IQueryable<HuatongApply.Data.Applyitem> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyitem, bool>("ItemName", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.DateTime? createdOn)
        {
            // support nulls
            return createdOn == null 
                ? queryable.Where(a => a.CreatedOn == null) 
                : queryable.Where(a => a.CreatedOn == createdOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, ComparisonOperator comparisonOperator, System.DateTime? createdOn)
        {
            if (createdOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("createdOn", "Parameter 'createdOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.CreatedOn > createdOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.CreatedOn >= createdOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.CreatedOn < createdOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.CreatedOn <= createdOn);
                case ComparisonOperator.NotEquals:
                    return createdOn == null 
                        ? queryable.Where(a => a.CreatedOn != null) 
                        : queryable.Where(a => a.CreatedOn != createdOn);
                default:
                    return createdOn == null 
                        ? queryable.Where(a => a.CreatedOn == null) 
                        : queryable.Where(a => a.CreatedOn == createdOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdOn">CreatedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.DateTime? createdOn, params System.DateTime?[] additionalValues)
        {
            var createdOnList = new List<System.DateTime?> { createdOn };

            if (additionalValues != null)
                createdOnList.AddRange(additionalValues);
            else
                createdOnList.Add(null);

            if (createdOnList.Count == 1)
                return queryable.ByCreatedOn(createdOnList[0]);

            return queryable.ByCreatedOn(createdOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyitem, bool>("CreatedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.String createdBy)
        {
            // support nulls
            return createdBy == null 
                ? queryable.Where(a => a.CreatedBy == null) 
                : queryable.Where(a => a.CreatedBy == createdBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, ContainmentOperator containmentOperator, System.String createdBy)
        {
            if (createdBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("createdBy", "Parameter 'createdBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.CreatedBy.Contains(createdBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.CreatedBy.StartsWith(createdBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.CreatedBy.EndsWith(createdBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.CreatedBy.Contains(createdBy) == false);
                case ContainmentOperator.NotEquals:
                    return createdBy == null 
                        ? queryable.Where(a => a.CreatedBy != null) 
                        : queryable.Where(a => a.CreatedBy != createdBy);
                default:
                    return createdBy == null 
                        ? queryable.Where(a => a.CreatedBy == null) 
                        : queryable.Where(a => a.CreatedBy == createdBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createdBy">CreatedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.String createdBy, params System.String[] additionalValues)
        {
            var createdByList = new List<System.String> { createdBy };

            if (additionalValues != null)
                createdByList.AddRange(additionalValues);
            else
                createdByList.Add(null);

            if (createdByList.Count == 1)
                return queryable.ByCreatedBy(createdByList[0]);

            return queryable.ByCreatedBy(createdByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.CreatedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByCreatedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyitem, bool>("CreatedBy", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.DateTime? modifiedOn)
        {
            // support nulls
            return modifiedOn == null 
                ? queryable.Where(a => a.ModifiedOn == null) 
                : queryable.Where(a => a.ModifiedOn == modifiedOn);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, ComparisonOperator comparisonOperator, System.DateTime? modifiedOn)
        {
            if (modifiedOn == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("modifiedOn", "Parameter 'modifiedOn' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(a => a.ModifiedOn > modifiedOn);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(a => a.ModifiedOn >= modifiedOn);
                case ComparisonOperator.LessThan:
                    return queryable.Where(a => a.ModifiedOn < modifiedOn);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(a => a.ModifiedOn <= modifiedOn);
                case ComparisonOperator.NotEquals:
                    return modifiedOn == null 
                        ? queryable.Where(a => a.ModifiedOn != null) 
                        : queryable.Where(a => a.ModifiedOn != modifiedOn);
                default:
                    return modifiedOn == null 
                        ? queryable.Where(a => a.ModifiedOn == null) 
                        : queryable.Where(a => a.ModifiedOn == modifiedOn);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedOn">ModifiedOn to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.DateTime? modifiedOn, params System.DateTime?[] additionalValues)
        {
            var modifiedOnList = new List<System.DateTime?> { modifiedOn };

            if (additionalValues != null)
                modifiedOnList.AddRange(additionalValues);
            else
                modifiedOnList.Add(null);

            if (modifiedOnList.Count == 1)
                return queryable.ByModifiedOn(modifiedOnList[0]);

            return queryable.ByModifiedOn(modifiedOnList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedOn"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedOn(this IQueryable<HuatongApply.Data.Applyitem> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyitem, bool>("ModifiedOn", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.String modifiedBy)
        {
            // support nulls
            return modifiedBy == null 
                ? queryable.Where(a => a.ModifiedBy == null) 
                : queryable.Where(a => a.ModifiedBy == modifiedBy);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, ContainmentOperator containmentOperator, System.String modifiedBy)
        {
            if (modifiedBy == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("modifiedBy", "Parameter 'modifiedBy' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(a => a.ModifiedBy.Contains(modifiedBy));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(a => a.ModifiedBy.StartsWith(modifiedBy));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(a => a.ModifiedBy.EndsWith(modifiedBy));
                case ContainmentOperator.NotContains:
                    return queryable.Where(a => a.ModifiedBy.Contains(modifiedBy) == false);
                case ContainmentOperator.NotEquals:
                    return modifiedBy == null 
                        ? queryable.Where(a => a.ModifiedBy != null) 
                        : queryable.Where(a => a.ModifiedBy != modifiedBy);
                default:
                    return modifiedBy == null 
                        ? queryable.Where(a => a.ModifiedBy == null) 
                        : queryable.Where(a => a.ModifiedBy == modifiedBy);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="modifiedBy">ModifiedBy to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, System.String modifiedBy, params System.String[] additionalValues)
        {
            var modifiedByList = new List<System.String> { modifiedBy };

            if (additionalValues != null)
                modifiedByList.AddRange(additionalValues);
            else
                modifiedByList.Add(null);

            if (modifiedByList.Count == 1)
                return queryable.ByModifiedBy(modifiedByList[0]);

            return queryable.ByModifiedBy(modifiedByList);
        }

        /// <summary>
        /// Gets a query for <see cref="HuatongApply.Data.Applyitem.ModifiedBy"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith", "6.0.0.0")]
        public static IQueryable<HuatongApply.Data.Applyitem> ByModifiedBy(this IQueryable<HuatongApply.Data.Applyitem> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<HuatongApply.Data.Applyitem, bool>("ModifiedBy", values);
            return queryable.Where(expression);
        }
    
        #endregion
        
        #region By Association
        
        #endregion
    }
}
#pragma warning restore 1591

